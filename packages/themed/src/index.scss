@use "sass:map";
@use "sass:meta";
@use "sass:color";
@use "sass:list";

// An empty map that will be filled with the given themes, once the `@themes` mixin was called
$themes-map: ();
// List of all keys in the themes to check which keys exist.
$theme-values: ();
// The string used to prefix all CSS variables
$prefix: "themed";

@function verify-themes($themes) {
  @if not meta.type-of($themes) == "map" {
    @error "The given themes variable is not a valid SCSS map.";
    @return false;
  }

  @if list.length(map.keys($themes)) == 0 {
    @error "The map of themes is empty.";
    @return false;
  }

  $first-theme-name: list.nth(map.keys($themes), 1);
  $first-theme: map.get($themes, $first-theme-name);

  @each $theme-name, $theme-map in $themes {
    @each $key, $value in $theme-map {
      @if not map.has-key($first-theme, $key) {
        @error "One or more themes do not define the value #{$key}, so you cannot use it in #{$theme-name}";
        @return false;
      }
    }
  }

  @return true;
}

@mixin make-css-variable($prefix, $key, $value) {
  --#{$prefix}-#{$key}: #{$value};
}

// Given a map of themes, checks all maps to be valid, have equal keys etc,
// Then, saves the themes to global variables to do compile-time checks later and
// creates CSS variables for each theme.
//
// the `$prefix` is used for the CSS variable, for example
@mixin themes($themes, $prefix: "themed") {
  @if not verify-themes($themes) {
    @error "Unable to register themes, see error above.";
  }

  // Populate the global themes variable. This is later used just for validation etc.
  $themes-map: $themes !global;
  // Register valid keys. We checked that all maps have the same keys, so we just get the ones from the first theme.
  $theme-values: map.keys(list.nth(map.values($themes-map), 1)) !global;
  // Prefix used for CSS variables
  $prefix: $prefix !global;

  @each $theme-name, $theme-map in $themes {
    html[data-theme="#{$theme-name}"] {
      // Register the default variables for each theme
      @each $key, $val in $theme-map {
        @include make-css-variable($prefix, $key, $val);

        @content ($prefix, $key, $val);
      }
    }
  }
}

// Returns a value from the current theme, checking for validity
// You could also just use the `var(--themed-#{$name})` directly, but this function
// provides a nice way to check for validity and provide a better error message
@function themed($name) {
  @if meta.type-of($name) != "string" {
    @error "'#{$name}' is not a string (should be quoted when passed into this function)";
  } @else if list.index($theme-values, $name) == null {
    @error "'#{$name}' is not defined in your themes.";
  }

  @return var(--#{$prefix}-#{$name});
}
