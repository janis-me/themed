@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';

// ------------
// global SCSS variables
// ------------

// An empty map that will be filled with the given themes, once the `@check` mixin was called
$__global__themes-map: ();
// List of all keys in the themes to check which keys exist.
$__global__theme-keys: ();
// The string used to prefix all CSS variables
$__global__prefix: 'themed';

// ------------
// Helper methods/mixins
// ------------

// A function that applies the given plugins to each value of every theme.
// This can be used to dynamically alter themes, adding more variables to them etc.
@function _apply-plugins($themes, $plugins...) {
  $result-map: $themes;

  @each $theme-name, $theme-map in $themes {
    $theme-result: $theme-map;

    @each $plugin in $plugins {
      $plugin-result: $theme-result;

      @each $key, $value in $theme-map {
        $result: meta.call($plugin, $key, $value, $theme-name, $themes);
        $plugin-result: map.merge($plugin-result, $result);
      }

      $theme-result: map.merge($theme-result, $plugin-result);
    }

    $result-map: map.deep-merge($result-map, (#{$theme-name}: $theme-result));
  }

  @return $result-map;
}

@function _verify-themes($themes) {
  @if not meta.type-of($__global__themes-map) == 'map' {
    @error "The given themes variable is not a valid SCSS map.";
    @return false;
  }

  @if list.length(map.keys($themes)) == 0 {
    @error "The map of themes is empty.";
    @return false;
  }

  $primary-theme-name: list.nth(map.keys($themes), 1);
  $primary-theme: map.get($themes, $primary-theme-name);

  // Get all theme keys from the first theme as reference
  $reference-keys: map.keys($primary-theme);

  // Check each theme against the reference keys
  @each $theme-name, $theme-entry in $themes {
    // Check if the current theme has all reference keys
    @each $key in $reference-keys {
      @if not map.has-key($theme-entry, $key) {
        @error "Theme '#{$theme-name}' is missing the key '#{$key}'";
        @return false;
      }
    }

    // Check if the current theme has any extra keys not in the reference
    @each $key in map.keys($theme-entry) {
      @if not list.index($reference-keys, $key) {
        @error "Theme '#{$theme-name}' has an extra key '#{$key}' not present in other themes";
        @return false;
      }
    }
  }

  @return true;
}

// ------------
// public facing functions / mixins
// ------------

@mixin make-css-variable($prefix, $key, $value) {
  --#{$prefix}-#{$key}: #{$value};
}

// Given a map of themes, checks all maps to be valid, have equal keys etc,
// Then, saves the themes to global variables to do compile-time checks later
// the `prefix` is used for the CSS variables only.
@mixin check($themes, $prefix: 'themed', $plugins: []) {
  @if not _verify-themes($themes) {
    @error "Error while checking themes. See error above.";
  }

  // Populate the global themes variable. This is later used just for validation etc.
  $__global__themes-map: $themes !global;
  // Register valid keys. We checked that all maps have the same keys, so we just get the ones from the first theme.
  $__global__theme-keys: map.keys(list.nth(map.values($__global__themes-map), 1)) !global;
  // Prefix used for CSS variables
  $__global__prefix: $prefix !global;
}

// Verifies themes and then applies them to the documentElement.
@mixin apply($themes, $prefix: 'themed', $plugins: []) {
  @include check($themes, $prefix);

  $_themes: _apply-plugins($themes, $plugins...);

  @each $theme-name, $theme-map in $_themes {
    html[data-theme='#{$theme-name}'] {
      // Register the default variables for each theme
      @each $key, $val in $theme-map {
        @include make-css-variable($prefix, $key, $val);
        // Add extra content for each theme.
        @content ($prefix, $key, $val, $theme-name);
      }
    }
  }
}

// Returns a value from the current theme, checking for validity
// You could also just use the `var()` directly, but this function
// provides a nice way to check for validity and shows a better error message
@function themed($name, $verify: true) {
  @if list.length($__global__themes-map) == 0 {
    @error "There are no themes registered. You probably forgot to call 'register' or 'apply'";
  }

  @if meta.type-of($name) != 'string' {
    @error "'#{$name}' is not a string (should be quoted when passed into this function)";
  } @else if $verify and list.index($__global__theme-keys, $name) == null {
    @error "'#{$name}' is not defined in your themes.";
  }

  @return var(--#{$__global__prefix}-#{$name});
}

// Return a themes variable without any type-checking or using CSS variables,
// Useful for custom theming logic on a component level
@function unthemed($name, $theme: null, $verify: true) {
  @if list.length($__global__themes-map) == 0 {
    @error "There are no themes registered. You probably forgot to call 'register' or 'apply'";
  }

  @if meta.type-of($name) != 'string' {
    @error "'#{$name}' is not a string (should be quoted when passed into this function)";
  } @else if $verify and list.index($__global__theme-keys, $name) == null {
    @error "'#{$name}' is not defined in your themes.";
  }

  @if $theme {
    $themes-entry: map.get($__global__themes-map, $theme);
    @return map.get($themes-entry, $name);
  }

  $primary-theme-name: list.nth(map.keys($__global__themes-map), 1);
  $primary-theme: map.get($__global__themes-map, $primary-theme-name);

  @return map.get($primary-theme, $name);
}
