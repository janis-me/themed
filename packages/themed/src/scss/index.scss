@use './utils';

@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';

// ------------
// global SCSS variables
// ------------

// An empty map that will be filled with the given themes, once the `@check` mixin was called
$__themed__themes: ();
$__themed__config: ();

// ------------
// Helper methods/mixins
// ------------

$__themed__allowed-config-props: ('prefix', 'plugins');
$__themed__allowed-plugin-props: ('_plugin-id', 'pre-apply', 'post-apply', 'extend-all', 'plugins');
$__themed__all-allowed-props: list.join($__themed__allowed-config-props, $__themed__allowed-plugin-props);

// A function that applies the given plugins to each value of every theme.
// This can be used to dynamically alter themes, adding more variables to them etc.
@function _extend-by-plugins($themes, $plugins, $prefix) {
  $result-map: $themes;

  @each $plugin in $plugins {
    $plugin-id: map.get($plugin, '_plugin-id');
    @if map.has-key($plugin, 'extend-all') {
      $plugin-extend-function: map.get($plugin, 'extend-all');
      $plugin-result: $result-map;

      @if meta.type-of($plugin-extend-function) == 'function' {
        // Call the plugin 'extend' function with all themes and the prefix.
        $plugin-result: meta.call($plugin-extend-function, $result-map, $prefix);

        @if meta.type-of($plugin-result) != 'map' {
          @error "[themed] The plugin '#{$plugin-id}' did not return a map for an 'extend-all' action. This is fatal.";
        }
      } @else {
        @warn "Themed: Extend function for plugin '#{$plugin-id}' is not a valid function. Skipping.";
      }

      $result-map: map.deep-merge($result-map, $plugin-result);
    }
  }

  @return $result-map;
}

// Plugins can be 'pre-apply', 'post-apply' or both.
// This mixin executes the given mixin for each plugin.
@mixin _apply-plugins($plugins, $type, $themes, $prefix) {
  @if $type != 'pre-apply' and $type != 'post-apply' {
    @error "[themed] The given plugin type '#{$type}' is not a valid type. Use 'pre-apply' or 'post-apply'.";
  }

  @each $plugin in $plugins {
    $plugin-id: map.get($plugin, '_plugin-id');

    @if map.has-key($plugin, $type) {
      $plugin-flag-mixin: map.get($plugin, $type);

      @if meta.type-of($plugin-flag-mixin) == 'mixin' {
        // the 'core' of flag plugins: Apply the defined mixins.
        @include meta.apply($plugin-flag-mixin, $themes, $prefix);
      } @else {
        @warn "[themed] #{$type} mixin for plugin '#{$plugin-id}' is not a valid mixin. Skipping.";
      }
    }
  }
}

// The main function to get the final config.
// merges all user and plugin configs.
@function _get-and-validate-config($configs) {
  $config: (
    'prefix': 'themed',
    'plugins': (),
  );

  @if meta.type-of($configs) == 'arglist' {
    @each $item in $configs {
      @if meta.type-of($item) != 'map' {
        @error "[themed] The given config is not a valid SCSS map.";
      }

      $keys: map.keys($item);

      // The given config has a '_plugin-id', so it is treated as a plugin config.
      @if list.index($keys, '_plugin-id') != null {
        // Should be treated as a plugin
        @if not _verify-plugin-config($item) {
          @error "[themed] The given plugin is not valid. See error above.";
        }

        // Include the plugin in the list of plugins.
        $existing-plugins: map.get($config, 'plugins');

        // Check if there are any nested plugins (plugins can have other plugins)
        // If so, add them to the list of plugins.
        $nested-plugins: map.get($item, 'plugins');
        @if $nested-plugins != null {
          @each $nested-plugin in $nested-plugins {
            @if not _verify-plugin-config($nested-plugin) {
              @error "[themed] The given plugin is not valid. See error above.";
            }
            // Include the nested plugin in the list of plugins.
            $existing-plugins: list.append($existing-plugins, $nested-plugin);
          }
        }

        $config: map.merge(
          $config,
          (
            'plugins': list.append($existing-plugins, $item),
          )
        );
      } @else {
        // Treating as user config
        @if not _verify-user-config($item) {
          @error "[themed] The given config is not valid. See error above.";
        } @else {
          $prefix: map.get($item, 'prefix');
          $plugins: map.get($item, 'plugins');

          @if $prefix != null {
            $config: map.merge(
              $config,
              (
                'prefix': $prefix,
              )
            );
          }

          @if $plugins != null {
            @each $plugin in $plugins {
              @if not _verify-plugin-config($plugin) {
                @error "[themed] The given plugin is not valid. See error above.";
              }

              // Include the plugin in the list of plugins.
              $existing-plugins: map.get($config, 'plugins');
              $config: map.merge(
                $config,
                (
                  'plugins': list.append($existing-plugins, $plugin),
                )
              );
            }
          }
        }
      }
    }
  } @else {
    @error "[themed] Something is wrong with the given configs.";
  }

  @return $config;
}

@function _verify-plugin-config($plugin) {
  @if meta.type-of($plugin) != 'map' {
    @error "[themed] The given plugin is not valid. It must be a SCSS map including a '_plugin-id' and some actions. See https://themed.janis.me/guide/plugins.html.";
  }

  $plugin-id: map.get($plugin, '_plugin-id');
  $plugin-keys: map.keys($plugin);

  // Check if the plugin has a valid id
  @if meta.type-of($plugin-id) != 'string' or $plugin-id == '' {
    @error "[themed] A plugin does not have a valid id. This is fatal.";
  }

  @if list.length($plugin-keys) == 1 {
    @error "[themed] The plugin '#{$plugin-id}' does not have any actions defined. It must define at least one of #{$__themed__allowed-plugin-props}";
  }

  // Check if the plugin has a valid type
  @each $key, $val in $plugin {
    @if $key != '_plugin-id' {
      @if list.index($__themed__allowed-plugin-props, $key) == null {
        @error "[themed] The plugin '#{$plugin-id}' has an invalid key '#{$key}'. Allowed keys are: #{$__themed__allowed-plugin-props}";
      }
    }
  }

  @return true;
}

// Function to verify user config maps passed to the 'configure' mixin.
// Currently, those configs might contain the 'prefix' and 'plugins' keys.
@function _verify-user-config($config) {
  @each $key, $val in $config {
    @if list.index($__themed__allowed-config-props, $key) == null {
      @error "[themed] The given config has an invalid key '#{$key}'. Allowed keys are: #{$__themed__allowed-config-props}";
    }

    @if $key == 'prefix' {
      @if meta.type-of($val) != 'string' {
        @error "[themed] The 'prefix' config option must be a string.";
      }
    }
  }

  @return true;
}

@function _verify-themes($themes) {
  @if not meta.type-of($__themed__themes) == 'map' {
    @error "[themed] The given themes variable is not a valid SCSS map.";
    @return false;
  }

  @if list.length(map.keys($themes)) == 0 {
    @error "[themed] The map of themes is empty.";
    @return false;
  }

  $primary-theme-name: list.nth(map.keys($themes), 1);
  $primary-theme: map.get($themes, $primary-theme-name);

  // Get all theme keys from the first theme as reference
  $reference-keys: map.keys($primary-theme);

  // Check each theme against the reference keys
  @each $theme-name, $theme-entry in $themes {
    // Check if the current theme has all reference keys
    @each $key in $reference-keys {
      @if not map.has-key($theme-entry, $key) {
        @error "[themed] Theme '#{$theme-name}' is missing the key '#{$key}'";
        @return false;
      }
    }

    // Check if the current theme has any extra keys not in the reference
    @each $key in map.keys($theme-entry) {
      @if not list.index($reference-keys, $key) {
        @error "[themed] Theme '#{$theme-name}' has an extra key '#{$key}' not present in other themes";
        @return false;
      }
    }
  }

  @return true;
}

// ------------
// public facing functions / mixins
// ------------

// Given a map of themes, checks all maps to be valid, have equal keys etc,
// Applies all 'extend' plugins.
// Then, saves the themes, config etc. to global variables to do compile-time checks later
@mixin configure($themes, $configs...) {
  $config: _get-and-validate-config($configs);

  $prefix: map.get($config, 'prefix');
  $plugins: map.get($config, 'plugins');

  $_themes: _extend-by-plugins($themes, $plugins, $prefix);

  @if not _verify-themes($_themes) {
    @error "[themed] Error while checking themes. See error above.";
  }

  // Populate the global themes variable. This is later used just for validation etc.
  $__themed__themes: $_themes !global;
  $__themed__config: $config !global;
}

// Verifies themes and then applies them to the documentElement.
@mixin apply() {
  $prefix: map.get($__themed__config, 'prefix');
  $plugins: map.get($__themed__config, 'plugins');

  @include _apply-plugins($plugins, 'pre-apply', $__themed__themes, $prefix);

  @each $theme-name, $theme-map in $__themed__themes {
    html[data-theme='#{$theme-name}'] {
      // Register the default variables for each theme
      @each $key, $val in $theme-map {
        @include utils.make-css-variable($prefix, $key, $val);
        // Add extra content for each theme.
        @content ($prefix, $key, $val, $theme-name);
      }
    }
  }

  @include _apply-plugins($plugins, 'post-apply', $__themed__themes, $prefix);
}

// Returns a value from the current theme, checking for validity
// You could also just use the `var()` directly, but this function
// provides a nice way to check for validity and shows a better error message
@function themed($name, $verify: true) {
  $theme-keys: map.keys(list.nth(map.values($__themed__themes), 1));
  $prefix: map.get($__themed__config, 'prefix');

  @if list.length($__themed__themes) == 0 {
    @error "[themed] There are no themes registered. You probably forgot to call 'check' or 'apply'";
  }

  @if meta.type-of($name) != 'string' {
    @error "[themed] '#{$name}' is not a string (should be quoted when passed into this function)";
  } @else if $verify and list.index($theme-keys, $name) == null {
    @error "[themed] '#{$name}' is not defined in your themes.";
  }

  @return utils.get-css-variable($prefix, $name);
}

// Return a themes variable without any type-checking or using CSS variables,
// Useful for custom theming logic on a component level
@function unthemed($name, $theme: null, $verify: true) {
  $theme-keys: map.keys(list.nth(map.values($__themed__themes), 1));

  @if list.length($__themed__themes) == 0 {
    @error "[themed] There are no themes registered. You probably forgot to call 'check' or 'apply'";
  }

  @if meta.type-of($name) != 'string' {
    @error "[themed] '#{$name}' is not a string (should be quoted when passed into this function)";
  } @else if $verify and list.index($theme-keys, $name) == null {
    @error "[themed] '#{$name}' is not defined in your themes.";
  }

  @if $theme {
    $themes-entry: map.get($__themed__themes, $theme);
    @return map.get($themes-entry, $name);
  }

  $primary-theme-name: list.nth(map.keys($__themed__themes), 1);
  $primary-theme: map.get($__themed__themes, $primary-theme-name);

  @return map.get($primary-theme, $name);
}
