@use './utils';

@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';

// ------------
// global SCSS variables
// ------------

// An empty map that will be filled with the given themes, once the `@check` mixin was called
$__themed__themes: ();
$__themed__plugins: ();
// List of all keys in the (primary) theme to check which keys exist.
$__themed__theme-keys: ();
// The string used to prefix all CSS variables
$__themed__prefix: 'themed';

// ------------
// Helper methods/mixins
// ------------

$__themed__allowed-plugin-types: ('pre-apply', 'post-apply', 'extend-all');

// A function that applies the given plugins to each value of every theme.
// This can be used to dynamically alter themes, adding more variables to them etc.
@function _extend-by-plugins($themes, $plugins) {
  $result-map: $themes;

  @each $plugin in $plugins {
    $plugin-name: map.get($plugin, 'name');
    @if map.has-key($plugin, 'extend-all') {
      $plugin-modify-function: map.get($plugin, 'extend-all');
      $plugin-result: $result-map;

      @if meta.type-of($plugin-modify-function) == 'function' {
        // Call the plugin 'modify' function with all themes and the prefix.
        $plugin-result: meta.call($plugin-modify-function, $result-map, $__themed__prefix);

        @if meta.type-of($plugin-result) != 'map' {
          @error "[themed] The plugin '#{$plugin-name}' did not return a map for an 'extend-all' action. This is fatal.";
        }
      } @else {
        @warn "Themed: Modify function for plugin '#{$plugin-name}' is not a valid function. Skipping.";
      }

      $result-map: map.deep-merge($result-map, $plugin-result);
    }
  }

  @return $result-map;
}

// Plugins can be 'pre-apply', 'post-apply' or both.
// This mixin executes the given mixin for each plugin.
@mixin _apply-plugins($plugins, $type) {
  @if $type != 'pre-apply' and $type != 'post-apply' {
    @error "[themed] The given plugin type '#{$type}' is not a valid type. Use 'pre-apply' or 'post-apply'.";
  }

  @each $plugin in $__themed__plugins {
    $plugin-name: map.get($plugin, 'name');

    @if map.has-key($plugin, $type) {
      $plugin-flag-mixin: map.get($plugin, $type);

      @if meta.type-of($plugin-flag-mixin) == 'mixin' {
        // the 'core' of flag plugins: Apply the defined mixins.
        @include meta.apply($plugin-flag-mixin, $__themed__themes, $__themed__prefix);
      } @else {
        @warn "[themed] #{$type} mixin for plugin '#{$plugin-name}' is not a valid mixin. Skipping.";
      }
    }
  }
}

@function _verify-plugins($plugins) {
  @if not meta.type-of($plugins) == 'list' {
    @error "[themed] The given plugins variable is not a valid SCSS list.";
    @return false;
  }

  @if list.length($plugins) == 0 {
    @error "[themed] The list of plugins is empty.";
    @return false;
  }

  @each $plugin in $plugins {
    @if meta.type-of($plugin) != 'map' {
      @error "[themed] The given plugin is not valid. It must be a SCSS map including a 'name' and some actions. See https://themed.janis.me/guide/plugins.html.";
      @return false;
    }

    $plugin-name: map.get($plugin, 'name');
    $plugin-keys: map.keys($plugin);

    // Check if the plugin has a valid name
    @if meta.type-of($plugin-name) != 'string' {
      @error "[themed] A plugin does not have a valid name. This is fatal.";
      @return false;
    }

    @if list.length($plugin-keys) == 1 {
      @error "[themed] The plugin '#{$plugin-name}' does not have any actions defined. It must define at least one of #{$__themed__allowed-plugin-types}";
      @return false;
    }

    // Check if the plugin has a valid type
    @each $key in $plugin-keys {
      @if $key != 'name' and not list.index($__themed__allowed-plugin-types, $key) {
        @error "[themed] The plugin '#{$plugin-name}' has an invalid key '#{$key}'. Allowed keys are: #{$__themed__allowed-plugin-types}";
        @return false;
      }
    }

    @each $key in $__themed__allowed-plugin-types {
      @if list.index($plugin-keys, $key) != null {
        $plugin-action: map.get($plugin, $key);
        @if meta.type-of($plugin-action) != 'mixin' and meta.type-of($plugin-action) != 'function' {
          @error "[themed] The plugin '#{$plugin-name}' has an invalid action '#{$key}'. It must be a mixin or function.";
          @return false;
        }
      }
    }
  }

  @return true;
}

@function _verify-themes($themes) {
  @if not meta.type-of($__themed__themes) == 'map' {
    @error "[themed] The given themes variable is not a valid SCSS map.";
    @return false;
  }

  @if list.length(map.keys($themes)) == 0 {
    @error "[themed] The map of themes is empty.";
    @return false;
  }

  $primary-theme-name: list.nth(map.keys($themes), 1);
  $primary-theme: map.get($themes, $primary-theme-name);

  // Get all theme keys from the first theme as reference
  $reference-keys: map.keys($primary-theme);

  // Check each theme against the reference keys
  @each $theme-name, $theme-entry in $themes {
    // Check if the current theme has all reference keys
    @each $key in $reference-keys {
      @if not map.has-key($theme-entry, $key) {
        @error "[themed] Theme '#{$theme-name}' is missing the key '#{$key}'";
        @return false;
      }
    }

    // Check if the current theme has any extra keys not in the reference
    @each $key in map.keys($theme-entry) {
      @if not list.index($reference-keys, $key) {
        @error "[themed] Theme '#{$theme-name}' has an extra key '#{$key}' not present in other themes";
        @return false;
      }
    }
  }

  @return true;
}

// ------------
// public facing functions / mixins
// ------------

// Given a map of themes, checks all maps to be valid, have equal keys etc,
// Applies all 'modify' plugins, so plugins that extend the themes.
// Then, saves the themes to global variables to do compile-time checks later
// the `prefix` is used for the CSS variables only.
@mixin configure($themes, $prefix: 'themed', $plugins: []) {
  @if meta.type-of($plugins) != 'list' {
    // Not an error. https://github.com/microsoft/vscode-css-languageservice/issues/231
    $plugins: [$plugins];
  }

  @if list.length($plugins) != 0 and not _verify-plugins($plugins) {
    @error "[themed] Error while checking plugins. See error above.";
  }

  $_themes: _extend-by-plugins($themes, $plugins);

  @if not _verify-themes($_themes) {
    @error "[themed] Error while checking themes. See error above.";
  }

  // Populate the global themes variable. This is later used just for validation etc.
  $__themed__themes: $_themes !global;
  $__themed__plugins: $plugins !global;
  // Register valid keys. We checked that all maps have the same keys, so we just get the ones from the first theme.
  $__themed__theme-keys: map.keys(list.nth(map.values($__themed__themes), 1)) !global;
  // Prefix used for CSS variables
  $__themed__prefix: $prefix !global;
}

// Verifies themes and then applies them to the documentElement.
@mixin apply() {
  @include _apply-plugins($__themed__plugins, 'pre-apply');

  @each $theme-name, $theme-map in $__themed__themes {
    html[data-theme='#{$theme-name}'] {
      // Register the default variables for each theme
      @each $key, $val in $theme-map {
        @include utils.make-css-variable($__themed__prefix, $key, $val);
        // Add extra content for each theme.
        @content ($__themed__prefix, $key, $val, $theme-name);
      }
    }
  }

  @include _apply-plugins($__themed__plugins, 'post-apply');
}

// Returns a value from the current theme, checking for validity
// You could also just use the `var()` directly, but this function
// provides a nice way to check for validity and shows a better error message
@function themed($name, $verify: true) {
  @if list.length($__themed__themes) == 0 {
    @error "[themed] There are no themes registered. You probably forgot to call 'check' or 'apply'";
  }

  @if meta.type-of($name) != 'string' {
    @error "[themed] '#{$name}' is not a string (should be quoted when passed into this function)";
  } @else if $verify and list.index($__themed__theme-keys, $name) == null {
    @error "[themed] '#{$name}' is not defined in your themes.";
  }

  @return utils.get-css-variable($__themed__prefix, $name);
}

// Return a themes variable without any type-checking or using CSS variables,
// Useful for custom theming logic on a component level
@function unthemed($name, $theme: null, $verify: true) {
  @if list.length($__themed__themes) == 0 {
    @error "[themed] There are no themes registered. You probably forgot to call 'check' or 'apply'";
  }

  @if meta.type-of($name) != 'string' {
    @error "[themed] '#{$name}' is not a string (should be quoted when passed into this function)";
  } @else if $verify and list.index($__themed__theme-keys, $name) == null {
    @error "[themed] '#{$name}' is not defined in your themes.";
  }

  @if $theme {
    $themes-entry: map.get($__themed__themes, $theme);
    @return map.get($themes-entry, $name);
  }

  $primary-theme-name: list.nth(map.keys($__themed__themes), 1);
  $primary-theme: map.get($__themed__themes, $primary-theme-name);

  @return map.get($primary-theme, $name);
}
