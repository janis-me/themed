@use 'sass:color';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';

$__themed__default-hue-blue: 240;
$__themed__default-hue-green: 140;
$__themed__default-hue-yellow: 90;
$__themed__default-hue-red: 20;

$__themed__primary-lightness-steps-light: (99%, 98%, 96%, 93%, 90%, 86%, 80%, 73%, 61%, 57%, 55%, 32%);
$__themed__primary-chroma-steps-light: (0.002, 0.008, 0.017, 0.032, 0.047, 0.06, 0.07, 0.1, 0.16, 0.167, 0.164, 0.085);

$__themed__primary-lightness-steps-dark: (23%, 24%, 30%, 34%, 38%, 42%, 47%, 52%, 61%, 57%, 77%, 90%);
$__themed__primary-chroma-steps-dark: (0.024, 0.028, 0.065, 0.092, 0.1, 0.106, 0.115, 0.132, 0.094, 0.164, 0.121, 0.043);

@function _generate-primary-scale($color, $mode) {
  $palette: (); // start empty list

  $steps: ();
  $lightness-steps: ();
  $chroma-steps: ();

  @if $mode == 'light' {
    $lightness-steps: $__themed__primary-lightness-steps-light;
    $chroma-steps: $__themed__primary-chroma-steps-light;
    // "sanitize" the color by ensuring it's roughly a 'solid primary'
    $color: color.change($color, $lightness: list.nth($lightness-steps, 9), $chroma: list.nth($chroma-steps, 9), $space: oklch);
  } @else if $mode == 'dark' {
    $lightness-steps: $__themed__primary-lightness-steps-dark;
    $chroma-steps: $__themed__primary-chroma-steps-dark;
    // "sanitize" the color by ensuring it's roughly a 'solid primary'
    $color: color.change($color, $lightness: list.nth($lightness-steps, 9), $chroma: list.nth($chroma-steps, 9), $space: oklch);
  } @else {
    @error "[themed-generate] Invalid mode. Use 'light' or 'dark'.";
  }

  $s-lightness: color.channel($color, 'lightness');
  $s-chroma: color.channel($color, 'chroma');

  @for $i from 1 through 12 {
    $t-lightness: list.nth($lightness-steps, $i);
    $t-chroma: list.nth($chroma-steps, $i);

    $lightness: $t-lightness - $s-lightness;
    $chroma: $t-chroma - $s-chroma;

    $shade: color.adjust($color, $lightness: $lightness, $chroma: $chroma, $space: oklch);
    $shade: color.to-gamut($shade, $space: rgb, $method: local-minde);

    // reconstruct with same hue, append to list
    $palette: list.append($palette, $shade);
  }

  @return $palette;
}

$__themed__gray-lightness-steps-light: (99%, 98%, 95%, 93%, 91%, 88%, 85%, 79%, 64%, 61%, 50%, 24%);
$__themed__gray-lightness-steps-dark: (23%, 26%, 29%, 32%, 34%, 37%, 42%, 50%, 55%, 59%, 77%, 94%);

// The max amount of chroma we allow in the gray scale.
// This is a bit generous, but helps to force 'gray' colors to be at least somewhat gray.
$__themed__gray-chroma-limit: 0.04;

@function _generate-gray-scale($color, $mode, $space: oklch) {
  $palette: (); // start empty list

  $steps: ();
  $lightness-steps: ();

  @if $mode == 'light' {
    $lightness-steps: $__themed__gray-lightness-steps-light;
    // "sanitize" the color by ensuring it's roughly a 'solid grey'
    $color: color.change($color, $lightness: list.nth($lightness-steps, 9), $space: oklch);
  } @else if $mode == 'dark' {
    $lightness-steps: $__themed__gray-lightness-steps-dark;

    // "sanitize" the color by ensuring it's roughly a 'solid grey'
    $color: color.change($color, $lightness: list.nth($lightness-steps, 9), $space: oklch);
  } @else {
    @error "[themed-generate] Invalid mode. Use 'light' or 'dark'.";
  }

  $s-lightness: color.channel($color, 'lightness');

  @for $i from 1 through 12 {
    $t-lightness: list.nth($lightness-steps, $i);

    $lightness: $t-lightness - $s-lightness;

    $shade: color.adjust($color, $lightness: $lightness, $space: oklch);

    @if color.channel($shade, 'chroma') > $__themed__gray-chroma-limit {
      $shade: color.change($shade, $chroma: $__themed__gray-chroma-limit, $space: oklch);
    }

    // reconstruct with same hue, append to list
    $palette: list.append($palette, $shade);
  }

  @return $palette;
}

@function _add-colors($colors, $theme, $prefix, $target-space) {
  $result: ();

  @for $i from 1 through 12 {
    $key: '#{$prefix}-#{$i}';

    $val: list.nth($colors, $i);
    $val: color.to-gamut($val, $space: $target-space, $method: local-minde);
    $val: color.to-space($val, $target-space);

    $result: map.deep-merge(
      $result,
      (
        '#{$theme}': (
            '#{$key}': $val,
          ),
      )
    );
  }

  @return $result;
}

@function __themed__generator-colors__extend-all($themes, $prefix) {
  $primary: $__themed__generator-colors__primary;
  $gray: $__themed__generator-colors__gray;
  $info: $__themed__generator-colors__info;
  $success: $__themed__generator-colors__success;
  $warning: $__themed__generator-colors__warning;
  $error: $__themed__generator-colors__error;
  $target-space: $__themed__generator-colors__target-space;
  $gray-chroma-limit: $__themed__generator-colors__gray-chroma-limit;

  @if meta.type-of($primary) != 'color' {
    @error "[themed-generate] $primary must be a valid color.";
  }

  // This generator works with oklch colors.
  $primary-oklch: color.to-space($primary, oklch);

  @if $gray == null {
    @if $gray-chroma-limit == null {
      $gray-chroma-limit: calc($__themed__gray-chroma-limit / 4);
    }

    // A low-chroma version of the primary color.
    // The chroma here could be 0, but a little tint of the primary color looks nicer.
    $gray: color.change($primary-oklch, $chroma: $gray-chroma-limit, $space: oklch);
  }

  @if $info == null {
    $info: color.change($primary-oklch, $hue: $__themed__default-hue-blue, $space: oklch);
  }
  @if $success == null {
    $success: color.change($primary-oklch, $hue: $__themed__default-hue-green, $space: oklch);
  }
  @if $warning == null {
    $warning: color.change($primary-oklch, $hue: $__themed__default-hue-yellow, $space: oklch);
  }
  @if $error == null {
    $error: color.change($primary-oklch, $hue: $__themed__default-hue-red, $space: oklch);
  }

  $gray: color.to-space($gray, oklch);
  $info: color.to-space($info, oklch);
  $success: color.to-space($success, oklch);
  $warning: color.to-space($warning, oklch);
  $error: color.to-space($error, oklch);

  $primary-light: _generate-primary-scale($primary-oklch, 'light');
  $primary-dark: _generate-primary-scale($primary-oklch, 'dark');

  $gray-light: _generate-gray-scale($gray, 'light');
  $gray-dark: _generate-gray-scale($gray, 'dark');

  $info-light: _generate-primary-scale($info, 'light');
  $info-dark: _generate-primary-scale($info, 'dark');

  $success-light: _generate-primary-scale($success, 'light');
  $success-dark: _generate-primary-scale($success, 'dark');

  $warning-light: _generate-primary-scale($warning, 'light');
  $warning-dark: _generate-primary-scale($warning, 'dark');

  $error-light: _generate-primary-scale($error, 'light');
  $error-dark: _generate-primary-scale($error, 'dark');

  $result-themes: (
    'dark': (),
    'light': (),
  );

  // Merge any existing themes.
  $result-themes: map.deep-merge($themes, $result-themes);

  $result-themes: map.deep-merge($result-themes, _add-colors($primary-light, 'light', 'primary', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($primary-dark, 'dark', 'primary', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($gray-light, 'light', 'gray', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($gray-dark, 'dark', 'gray', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($info-light, 'light', 'info', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($info-dark, 'dark', 'info', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($success-light, 'light', 'success', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($success-dark, 'dark', 'success', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($warning-light, 'light', 'warning', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($warning-dark, 'dark', 'warning', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($error-light, 'light', 'error', $target-space));
  $result-themes: map.deep-merge($result-themes, _add-colors($error-dark, 'dark', 'error', $target-space));

  @return $result-themes;
}

// long variable names to not pollute the global namespace too much.
$__themed__generator-colors__primary: null;
$__themed__generator-colors__gray: null;
$__themed__generator-colors__info: null;
$__themed__generator-colors__success: null;
$__themed__generator-colors__warning: null;
$__themed__generator-colors__error: null;
$__themed__generator-colors__target-space: rgb;
$__themed__generator-colors__gray-chroma-limit: null;

@function colors($primary, $gray: null, $info: null, $success: null, $warning: null, $error: null, $target-space: null, $gray-chroma-limit: null) {
  $__themed__generator-colors__primary: $primary !global;
  $__themed__generator-colors__gray: $gray !global;
  $__themed__generator-colors__info: $info !global;
  $__themed__generator-colors__success: $success !global;
  $__themed__generator-colors__warning: $warning !global;
  $__themed__generator-colors__error: $error !global;
  $__themed__generator-colors__target-space: $target-space !global;
  $__themed__generator-colors__gray-chroma-limit: $gray-chroma-limit !global;

  @return ('_plugin-id': 'themed-generator-colors', 'extend-all': meta.get-function(__themed__generator-colors__extend-all));
}
