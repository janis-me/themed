@use '@janis.me/themed';

@use 'sass:color';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';

$__themed__primary-lightness-steps-light: (99%, 98%, 96%, 93%, 90%, 86%, 80%, 73%, 61%, 57%, 55%, 32%);
$__themed__primary-chroma-steps-light: (0.002, 0.008, 0.017, 0.032, 0.047, 0.06, 0.07, 0.1, 0.16, 0.167, 0.164, 0.085);

$__themed__primary-lightness-steps-dark: (23%, 24%, 30%, 34%, 38%, 42%, 47%, 52%, 61%, 57%, 77%, 90%);
$__themed__primary-chroma-steps-dark: (
  0.024,
  0.028,
  0.065,
  0.092,
  0.1,
  0.106,
  0.115,
  0.132,
  0.064,
  0.164,
  0.121,
  0.043
);

@function _generate-primary-scale($color, $mode) {
  $palette: (); // start empty list

  $steps: ();
  $lightness-steps: ();
  $chroma-steps: ();

  @if $mode == 'light' {
    $lightness-steps: $__themed__primary-lightness-steps-light;
    $chroma-steps: $__themed__primary-chroma-steps-light;
  } @else if $mode == 'dark' {
    $lightness-steps: $__themed__primary-lightness-steps-dark;
    $chroma-steps: $__themed__primary-chroma-steps-dark;
  } @else {
    @error "[themed-generate] Invalid mode. Use 'light' or 'dark'.";
  }

  $s-lightness: color.channel($color, 'lightness');
  $s-chroma: color.channel($color, 'chroma');

  @for $i from 1 through 12 {
    $t-lightness: list.nth($lightness-steps, $i);
    $t-chroma: list.nth($chroma-steps, $i);

    $lightness: $t-lightness - $s-lightness;
    $chroma: $t-chroma - $s-chroma;

    $shade: color.adjust($color, $lightness: $lightness, $chroma: $chroma, $space: oklch);
    $shade: color.to-gamut($shade, $space: rgb, $method: local-minde);

    // reconstruct with same hue, append to list
    $palette: list.append($palette, $shade);
  }

  @return $palette;
}

@function generate($primary, $target-space: rgb) {
  @if meta.type-of($primary) != 'color' {
    @error "[themed-generate] $primary must be a valid color.";
  }

  // This generator works with oklch colors.
  $primary-oklch: color.to-space($primary, oklch);

  $primary-light: _generate-primary-scale($primary-oklch, 'light');
  $primary-dark: _generate-primary-scale($primary-oklch, 'dark');

  $result-themes: (
    dark: (),
    light: (),
  );

  @for $i from 1 through 12 {
    $key: 'primary-#{$i}';

    $light-val: color.to-space(list.nth($primary-light, $i), $target-space);
    $dark-val: color.to-space(list.nth($primary-dark, $i), $target-space);

    $result-themes: map.deep-merge(
      $result-themes,
      (
        light: (
            '#{$key}': $light-val,
          ),
        dark: (
            '#{$key}': $dark-val,
          ),
      )
    );
  }

  @return $result-themes;
}
