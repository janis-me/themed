@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:color';

$__themed__plugin-variants__name: 'themed-plugin-variants';

$__themed__plugin-variants__channels: null;
$__themed__plugin-variants__steps: null;
$__themed__plugin-variants__colorspace: null;
$__themed__plugin-variants__operation: null;

$__themed__plugin-variants__allowed-channels: (
  'red',
  'green',
  'blue',
  'hue',
  'saturation',
  'lightness',
  'whiteness',
  'blackness',
  'x',
  'y',
  'z',
  'chroma',
  'alpha'
);
$__themed__plugin-variants__allowed-operations: ('change', 'adjust', 'scale');

@function change-channel($color, $channel, $value) {
  $fn: meta.get-function('change', $module: 'color');
  $args: (
    $channel: $value,
  );
  @return meta.call($fn, $color, $args...);
}
@function adjust-channel($color, $channel, $value) {
  $fn: meta.get-function('adjust', $module: 'color');
  $args: (
    $channel: $value,
  );
  @return meta.call($fn, $color, $args...);
}
@function scale-channel($color, $channel, $value) {
  $fn: meta.get-function('scale', $module: 'color');
  $args: (
    $channel: $value,
  );
  @return meta.call($fn, $color, $args...);
}

@function __themed__plugin-variants__modify($themes, $prefix) {
  $result-map: ();

  // Loop through all themes
  @each $theme-name, $theme-map in $themes {
    $theme-result: $theme-map;

    // Loop through all variables
    @each $key, $value in $theme-map {
      @if meta.type-of($value) == 'color' {
        @each $channel in $__themed__plugin-variants__channels {
          @each $step in $__themed__plugin-variants__steps {
            $new-value: $value;

            @if $__themed__plugin-variants__operation == 'change' {
              $new-value: change-channel($value, $channel, $step);
            } @else if $__themed__plugin-variants__operation == 'adjust' {
              $new-value: adjust-channel($value, $channel, $step);
            } @else if $__themed__plugin-variants__operation == 'scale' {
              $new-value: scale-channel($value, $channel, $step);
            }

            $channel-prefix: string.slice($channel, 1, 1);

            $theme-result: map.merge($theme-result, (#{$key}--#{$channel-prefix}#{$step}: $new-value));
          }
        }
      }
    }

    $result-map: map.deep-merge(
      $result-map,
      (
        '#{$theme-name}': $theme-result,
      )
    );
  }

  @return $result-map;
}

@function variants($channels, $operation, $steps, $colorspace: null) {
  @each $channel in $channels {
    @if list.index($__themed__plugin-variants__allowed-channels, $channel) == null {
      @error "The variant '#{$variant}' is not allowed. Allowed variants are: #{list.join($__themed__plugin-variants__allowed-variants, ', ')}.";
    }
  }

  @if list.index($__themed__plugin-variants__allowed-operations, $operation) == null {
    @error "The operation '#{$operation}' is not allowed. Allowed operations are: #{list.join($__themed__plugin-variants__allowed-operations, ', ')}.";
  }

  @if meta.type-of($steps) != 'list' {
    @error "The steps must be a list. Got '#{meta.type-of($steps)}'. Note, that the type of value differs between the values you set. See https://sass-lang.com/documentation/modules/color/ for more info";
  }

  @if $colorspace != null and meta.type-of($colorspace) != 'string' {
    @error "The colorspace must be a string. Got '#{meta.type-of($colorspace)}'. See https://developer.mozilla.org/en-US/docs/Glossary/Color_space#named_color_spaces";
  }

  $__themed__plugin-variants__channels: $channels !global;
  $__themed__plugin-variants__operation: $operation !global;
  $__themed__plugin-variants__steps: $steps !global;
  $__themed__plugin-variants__colorspace: $colorspace !global;

  @return ('name': $__themed__plugin-variants__name, 'modify': meta.get-function(__themed__plugin-variants__modify));
}
