@use '../utils';

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:color';

$__themed__plugin-variants__id: 'themed-plugin-variants';

$__themed__plugin-variants__channels: null;
$__themed__plugin-variants__operations: null;
$__themed__plugin-variants__steps: null;

$__themed__plugin-variants__allowed-channels: (
  'red',
  'green',
  'blue',
  'hue',
  'saturation',
  'lightness',
  'whiteness',
  'blackness',
  'x',
  'y',
  'z',
  'chroma',
  'alpha'
);
$__themed__plugin-variants__allowed-operations: ('change', 'adjust', 'scale');

@function __themed__plugin-variants__extend-all($themes, $prefix) {
  $result-map: ();

  // Loop through all themes
  @each $theme-name, $theme-map in $themes {
    $theme-result: $theme-map;

    // Loop through all variables
    @each $key, $value in $theme-map {
      @if meta.type-of($value) == 'color' {
        @for $i from 1 through list.length($__themed__plugin-variants__channels) {
          $channel: list.nth($__themed__plugin-variants__channels, $i);
          $operation: list.nth($__themed__plugin-variants__operations, $i);
          $steps: list.nth($__themed__plugin-variants__steps, $i);

          @each $step in $steps {
            $new-value: utils.apply-variant($value, $operation, $channel, $step);
            $channel-prefix: string.slice($channel, 1, 1);
            $sanitized-step: utils.remove-special-characters('#{$step}');
            $theme-result: map.merge($theme-result, (#{$key}--#{$channel-prefix}#{$sanitized-step}: $new-value));
          }
        }
      }
    }

    $result-map: map.deep-merge(
      $result-map,
      (
        '#{$theme-name}': $theme-result,
      )
    );
  }

  @return $result-map;
}

// Arguments are given as a list of lists, always specifying channel, operation and steps
// e.g. (('red', 'change', 10), ('green', 'adjust', (10, 20, 30)), ('blue', 'scale', 0.5))
// They can also be given as a single list, e.g.
// red adjust (10, 20, 30) alpha change (0.5, 0.6, 0.7)
@function __themed__plugin-variants__parse-arguments($args) {
  $channels: ();
  $operations: ();
  $steps: ();

  @for $i from 1 through list.length($args) {
    $arg: list.nth($args, $i);

    @if $i % 3 == 1 {
      @if list.index($__themed__plugin-variants__allowed-channels, $arg) == null {
        @error "[#{$__themed__plugin-variants__id}] The channel '#{$arg}' is not allowed. Allowed channels are: #{list.join($__themed__plugin-variants__allowed-channels, ', ')}.";
      }

      $channels: list.append($channels, $arg);
    } @else if $i % 3 == 2 {
      @if list.index($__themed__plugin-variants__allowed-operations, $arg) == null {
        @error "[#{$__themed__plugin-variants__id}] The operation '#{$arg}' is not allowed. Allowed operations are: #{list.join($__themed__plugin-variants__allowed-operations, ', ')}.";
      }

      $operations: list.append($operations, $arg);
    } @else if $i % 3 == 0 {
      @if meta.type-of($arg) == 'list' {
        $steps: list.append($steps, $arg);
      } @else {
        $steps: list.append($steps, ($arg));
      }
    }
  }

  @return ($channels, $operations, $steps);
}

@function variants($args...) {
  $args-list: [];

  @for $i from 1 through list.length($args) {
    $arg: list.nth($args, $i);

    @if meta.type-of($arg) == 'list' {
      $args-list: list.join($args-list, $arg);
    } @else {
      @error "[#{$__themed__plugin-variants__id}] Each entry of the arguments list must be a list. Got '#{$arg}' of type '#{meta.type-of($arg)}'.";
    }
  }

  $parsed-args: __themed__plugin-variants__parse-arguments($args-list);

  $channels: list.nth($parsed-args, 1);
  $operations: list.nth($parsed-args, 2);
  $steps: list.nth($parsed-args, 3);

  $__themed__plugin-variants__channels: $channels !global;
  $__themed__plugin-variants__operations: $operations !global;
  $__themed__plugin-variants__steps: $steps !global;

  @return ('_plugin-id': $__themed__plugin-variants__id, 'extend-all': meta.get-function(__themed__plugin-variants__extend-all));
}
