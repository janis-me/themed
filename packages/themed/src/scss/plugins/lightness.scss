@use 'sass:meta';
@use 'sass:color';
@use 'sass:map';

@function lightness-modifier($key, $value, $theme-name, $themes) {
  $results: ();

  @if meta.type-of($value) == 'color' {
    @each $lightness in $lightness-steps {
      $new-value: color.to-space(
        color.change($value, $lightness: $lightness * 1%, $space: $lightness-colorspace),
        $lightness-colorspace
      );

      $results: map.merge(
        $results,
        (
          '#{$key}#{$lightness-prefix}#{$lightness}': $new-value,
        )
      );
    }
  }

  @return $results;
}

// Ugly way of returning a "dynamic" function:
// Just use SCSS globals...
$lightness-steps: (80, 60, 40, 20);
$lightness-prefix: '--l';
$lightness-colorspace: oklch;

// The lightness modifier adds each theme value with a given lightness value,
// as defined by "steps". By default, using lightness values of 80%, 60%, 40% and 20%
@function lightness($steps: null, $prefix: null, $colorspace: null) {
  @if $steps {
    $lightness-steps: $steps !global;
  }
  @if $prefix {
    $lightness-prefix: $prefix !global;
  }
  @if $colorspace {
    $lightness-colorspace: $colorspace !global;
  }

  @return meta.get-function(lightness-modifier);
}
