@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:color';

// ---------------------------
// misc modifiers
// ---------------------------

// ---- fill-modifier

@function fill-modifier($key, $value, $theme-name, $themes) {
  $results: ();

  $primary-theme-name: list.nth(map.keys($themes), 1);
  $primary-theme: map.get($themes, $primary-theme-name);

  @if $theme-name != $primary-theme-name {
    $current-theme: map.get($themes, $theme-name);

    @each $k, $v in $primary-theme {
      @if not map.has-key($current-theme, $k) {
        $results: map.merge(
          $results,
          (
            '#{$k}': $v,
          )
        );
      }
    }
  }

  @return $results;
}

/**
* The fill modifier ensures that all 'secondary' themes have the values of the 'primary' theme by copying missing values
*/
@function fill() {
  @return meta.get-function(fill-modifier);
}
// ---------------------------
// Color modifiers
// ---------------------------

// ---- colorspace-modifier

@function colorspace-modifier($key, $value, $theme-name, $themes) {
  @if meta.type-of($value) == 'color' {
    $results: (#{$key}: color.to-space($value, $colorspace-space));
    @return $results;
  }

  @return ();
}

// Ugly way of returning a "dynamic" function:
// Just use SCSS globals...
$colorspace-space: oklch;
/**
* The colorspace modifier converts every color in the theme to oklch space.
*/
@function colorspace($space: null) {
  @if $space {
    $colorspace-space: $space !global;
  }

  @return meta.get-function(colorspace-modifier);
}

// ---- alpha-modifier

@function alpha-modifier($key, $value, $theme-name, $themes) {
  $results: ();

  @if meta.type-of($value) == 'color' {
    @each $alpha in $alpha-steps {
      $new-value: color.to-space(
        color.change($value, $alpha: calc($alpha / 100), $space: $alpha-colorspace),
        $alpha-colorspace
      );

      $results: map.merge(
        $results,
        (
          '#{$key}#{$alpha-prefix}#{$alpha}': $new-value,
        )
      );
    }
  }

  @return $results;
}

// Ugly way of returning a "dynamic" function:
// Just use SCSS globals...
$alpha-steps: (80, 60, 40, 20);
$alpha-prefix: '--a';
$alpha-colorspace: oklch;
/**
* The alpha modifier adds each theme value with a given alpha value,
* as defined by "steps". By default, using alpha values of 80%, 60%, 40% and 20%
*/
@function alpha($steps: null, $prefix: null, $colorspace: null) {
  @if $steps {
    $alpha-steps: $steps !global;
  }
  @if $prefix {
    $alpha-prefix: $prefix !global;
  }
  @if $colorspace {
    $alpha-colorspace: $colorspace !global;
  }

  @return meta.get-function(alpha-modifier);
}

// ---- lightness-modifier

@function lightness-modifier($key, $value, $theme-name, $themes) {
  $results: ();

  @if meta.type-of($value) == 'color' {
    @each $lightness in $lightness-steps {
      $new-value: color.to-space(
        color.change($value, $lightness: $lightness * 1%, $space: $lightness-colorspace),
        $lightness-colorspace
      );

      $results: map.merge(
        $results,
        (
          '#{$key}#{$lightness-prefix}#{$lightness}': $new-value,
        )
      );
    }
  }

  @return $results;
}

// Ugly way of returning a "dynamic" function:
// Just use SCSS globals...
$lightness-steps: (80, 60, 40, 20);
$lightness-prefix: '--l';
$lightness-colorspace: oklch;
/**
* The lightness modifier adds each theme value with a given lightness value,
* as defined by "steps". By default, using lightness values of 80%, 60%, 40% and 20%
*/
@function lightness($steps: null, $prefix: null, $colorspace: null) {
  @if $steps {
    $lightness-steps: $steps !global;
  }
  @if $prefix {
    $lightness-prefix: $prefix !global;
  }
  @if $colorspace {
    $lightness-colorspace: $colorspace !global;
  }

  @return meta.get-function(lightness-modifier);
}

// ---- saturation-modifier

@function saturation-modifier($key, $value, $theme-name, $themes) {
  $results: ();

  @if meta.type-of($value) == 'color' {
    @each $saturation in $saturation-steps {
      $new-value: color.to-space(
        color.change($value, $saturation: $saturation * 1%, $space: $saturation-colorspace),
        $saturation-colorspace
      );

      $results: map.merge(
        $results,
        (
          '#{$key}#{$saturation-prefix}#{$saturation}': $new-value,
        )
      );
    }
  }

  @return $results;
}

// Ugly way of returning a "dynamic" function:
// Just use SCSS globals...
$saturation-steps: (80, 60, 40, 20);
$saturation-prefix: '--s';
$saturation-colorspace: oklch;
/**
* The saturation modifier adds each theme value with a given saturation value,
* as defined by "steps". By default, using saturation values of 80%, 60%, 40% and 20%
*/
@function saturation($steps: null, $prefix: null, $colorspace: null) {
  @if $steps {
    $saturation-steps: $steps !global;
  }
  @if $prefix {
    $saturation-prefix: $prefix !global;
  }
  @if $colorspace {
    $saturation-colorspace: $colorspace !global;
  }

  @return meta.get-function(saturation-modifier);
}
