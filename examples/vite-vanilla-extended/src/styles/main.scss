@use 'sass:meta';
@use 'sass:color';

@use './themes.scss';
@use '@janis.me/themed/plugins';
@use '@janis.me/themed/utils';

@import './button.scss';
@import './header.scss';

// This actually applies the base theme to the documentElement.
// Everything after the `using` keyword is used to dynamically generate more CSS variables.
// In this example, we generate each variable of the dark theme with a lighter value.
// NOTE: Because these CSS variables are not included in the theme map, they can also not be type-checked.
// Another note: The $theme-map and $theme-prefix variables are defined in globals.scss
@include apply(themes.$themes, $theme-prefix, $plugins: plugins.p3(themes.$high-contrast) plugins.fill()) using
  ($prefix, $key, $value, $theme) {
  @if $theme == 'dark' and meta.type-of($value) == 'color' {
    @include utils.make-css-variable($prefix, '#{$key}--light', color.change($value, $lightness: 30%));
  }
}

// Everything below this is just to showcase.

html,
body {
  color: themed('grey-12');
  background-color: themed('grey-1');
  margin: 0;
  padding: 0;
}

h1 {
  code {
    vertical-align: middle;
  }
}

code {
  font-weight: 400;
  color: themed('teal-9');
  background-color: themed('grey-3');
  border-radius: 3px;
  padding: 6px 8px;
  font-size: 1rem;
}

main {
  // 'unthemed' get's values from the default theme, or the theme given as a second argument.
  padding: 0 calc(unthemed('default-padding') * 4);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-family: sans-serif;
}

#app {
  display: grid;
  grid-template-rows: 60px 1fr;
  height: 100vh;
  width: 100vw;
}

#logo {
  max-height: 128px;
}
